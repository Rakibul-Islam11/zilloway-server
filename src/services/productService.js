
const createError = require('http-errors')
const Product = require('../models/productModel');
const { default: slugify } = require('slugify');
const { publicIdWithoutExtensionFromUrl } = require('../helper/cloudinaryHelper');
const cloudinary = require('../config/cloudinary')
const fs = require('fs');

const createProduct = async (productData) => {
    const { name, description, price, category, quantity, shipping} =
        productData;
    const productExists = await Product.exists({ name: name });
    if (productExists) {
        throw createError(
            409,
            'Product with this name already exists.'
        );
    }
    // create product
    const product = await Product.create({
        name: name,
        slug: slugify(name),
        description: description,
        price: price,
        quantity: quantity,
        shipping: shipping,
        // image: imageBufferString,
        category: category
    })

    return product;
};
const getProducts = async (page = 1, limit = 4, filter={}) => {

    
    const products = await Product.find(filter)
        .populate('category')
        .skip((page - 1) * limit)
        .limit(limit)
        .sort({ createdAt: -1 });

    if (!products) throw createError(404, 'no products found');

    const count = await Product.find(filter).
        countDocuments();
    
    return { products, count };
};
const getProductBySlug = async (slug) => {
    const product = await Product.findOne({ slug }).populate('category');
    if (!product) throw createError(404, 'no products found');
    return product;
};
const deleteProductBySlug = async (slug) => {
    try {
        // ‚úÖ Step 1: Product ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßã
        const existingProduct = await Product.findOne({ slug });
        if (!existingProduct) throw createError(404, 'No product found');

        // ‚úÖ Step 2: Cloudinary image delete ‡¶ï‡¶∞‡ßã
        if (existingProduct.image) {
            const publicId = await publicIdWithoutExtensionFromUrl(existingProduct.image);
            const { result } = await cloudinary.uploader.destroy(
                `ecommerceMern/products/${publicId}`
            );

            console.log('Cloudinary delete result:', result);

            if (result !== 'ok') {
                throw new Error('Product image was not deleted successfully from Cloudinary.');
            }
        }

        // ‚úÖ Step 3: Database ‡¶•‡ßá‡¶ï‡ßá product delete ‡¶ï‡¶∞‡ßã
        await Product.findOneAndDelete({ slug });

        return existingProduct; // success response ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    } catch (error) {
        throw error;
    }
};
const updateProductBySlug = async (slug, updates, updateOptions, imageFile) => {
    try {
        // üü¢ 1Ô∏è‚É£ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßã
        const existingProduct = await Product.findOne({ slug });
        if (!existingProduct) throw createError(404, 'Product not found');

        // üü¢ 2Ô∏è‚É£ ‡¶Ø‡¶¶‡¶ø name ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá slug ‡¶ì ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßã
        if (updates.name) {
            updates.slug = slugify(updates.name);
        }

        // üü¢ 3Ô∏è‚É£ ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶§‡ßÅ‡¶® image ‡¶Ü‡¶∏‡ßá (multer ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá)
        if (imageFile) {
            // Cloudinary-‡¶§‡ßá ‡¶™‡ßÅ‡¶∞‡¶®‡ßã image ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßã (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
            if (existingProduct.image) {
                const oldPublicId = await publicIdWithoutExtensionFromUrl(existingProduct.image);
                await cloudinary.uploader.destroy(`ecommerceMern/products/${oldPublicId}`);
            }

            // ‡¶®‡¶§‡ßÅ‡¶® image upload ‡¶ï‡¶∞‡ßã
            const uploadResult = await cloudinary.uploader.upload(imageFile.path, {
                folder: "ecommerceMern/products",
                use_filename: true,
                unique_filename: true,
            });

            // uploaded image URL product-‡¶è ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßã
            updates.image = uploadResult.secure_url;

            // ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤ delete ‡¶ï‡¶∞‡ßã (multer ‡¶Ø‡ßá temp folder ‡¶è ‡¶∞‡ßá‡¶ñ‡ßá‡¶õ‡¶ø‡¶≤)
            fs.unlinkSync(imageFile.path);
        }

        // üü¢ 4Ô∏è‚É£ Database update ‡¶ï‡¶∞‡ßã
        const updatedProduct = await Product.findOneAndUpdate({ slug }, updates, updateOptions);
        if (!updatedProduct) throw createError(404, 'Product not found during update');

        return updatedProduct;
    } catch (error) {
        throw error;
    }
};

module.exports = { createProduct, getProducts, getProductBySlug, deleteProductBySlug, updateProductBySlug };
